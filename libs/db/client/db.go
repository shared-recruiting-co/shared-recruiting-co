// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package client

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.getUserEmailJobStmt, err = db.PrepareContext(ctx, getUserEmailJob); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserEmailJob: %w", err)
	}
	if q.getUserEmailSyncHistoryStmt, err = db.PrepareContext(ctx, getUserEmailSyncHistory); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserEmailSyncHistory: %w", err)
	}
	if q.getUserOAuthTokenStmt, err = db.PrepareContext(ctx, getUserOAuthToken); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserOAuthToken: %w", err)
	}
	if q.getUserProfileByEmailStmt, err = db.PrepareContext(ctx, getUserProfileByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserProfileByEmail: %w", err)
	}
	if q.incrementUserEmailStatStmt, err = db.PrepareContext(ctx, incrementUserEmailStat); err != nil {
		return nil, fmt.Errorf("error preparing query IncrementUserEmailStat: %w", err)
	}
	if q.insertUserEmailJobStmt, err = db.PrepareContext(ctx, insertUserEmailJob); err != nil {
		return nil, fmt.Errorf("error preparing query InsertUserEmailJob: %w", err)
	}
	if q.listUserEmailJobsStmt, err = db.PrepareContext(ctx, listUserEmailJobs); err != nil {
		return nil, fmt.Errorf("error preparing query ListUserEmailJobs: %w", err)
	}
	if q.listUserOAuthTokensStmt, err = db.PrepareContext(ctx, listUserOAuthTokens); err != nil {
		return nil, fmt.Errorf("error preparing query ListUserOAuthTokens: %w", err)
	}
	if q.upsertUserEmailSyncHistoryStmt, err = db.PrepareContext(ctx, upsertUserEmailSyncHistory); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertUserEmailSyncHistory: %w", err)
	}
	if q.upsertUserOAuthTokenStmt, err = db.PrepareContext(ctx, upsertUserOAuthToken); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertUserOAuthToken: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.getUserEmailJobStmt != nil {
		if cerr := q.getUserEmailJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserEmailJobStmt: %w", cerr)
		}
	}
	if q.getUserEmailSyncHistoryStmt != nil {
		if cerr := q.getUserEmailSyncHistoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserEmailSyncHistoryStmt: %w", cerr)
		}
	}
	if q.getUserOAuthTokenStmt != nil {
		if cerr := q.getUserOAuthTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserOAuthTokenStmt: %w", cerr)
		}
	}
	if q.getUserProfileByEmailStmt != nil {
		if cerr := q.getUserProfileByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserProfileByEmailStmt: %w", cerr)
		}
	}
	if q.incrementUserEmailStatStmt != nil {
		if cerr := q.incrementUserEmailStatStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing incrementUserEmailStatStmt: %w", cerr)
		}
	}
	if q.insertUserEmailJobStmt != nil {
		if cerr := q.insertUserEmailJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertUserEmailJobStmt: %w", cerr)
		}
	}
	if q.listUserEmailJobsStmt != nil {
		if cerr := q.listUserEmailJobsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUserEmailJobsStmt: %w", cerr)
		}
	}
	if q.listUserOAuthTokensStmt != nil {
		if cerr := q.listUserOAuthTokensStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUserOAuthTokensStmt: %w", cerr)
		}
	}
	if q.upsertUserEmailSyncHistoryStmt != nil {
		if cerr := q.upsertUserEmailSyncHistoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertUserEmailSyncHistoryStmt: %w", cerr)
		}
	}
	if q.upsertUserOAuthTokenStmt != nil {
		if cerr := q.upsertUserOAuthTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertUserOAuthTokenStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                             DBTX
	tx                             *sql.Tx
	getUserEmailJobStmt            *sql.Stmt
	getUserEmailSyncHistoryStmt    *sql.Stmt
	getUserOAuthTokenStmt          *sql.Stmt
	getUserProfileByEmailStmt      *sql.Stmt
	incrementUserEmailStatStmt     *sql.Stmt
	insertUserEmailJobStmt         *sql.Stmt
	listUserEmailJobsStmt          *sql.Stmt
	listUserOAuthTokensStmt        *sql.Stmt
	upsertUserEmailSyncHistoryStmt *sql.Stmt
	upsertUserOAuthTokenStmt       *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                             tx,
		tx:                             tx,
		getUserEmailJobStmt:            q.getUserEmailJobStmt,
		getUserEmailSyncHistoryStmt:    q.getUserEmailSyncHistoryStmt,
		getUserOAuthTokenStmt:          q.getUserOAuthTokenStmt,
		getUserProfileByEmailStmt:      q.getUserProfileByEmailStmt,
		incrementUserEmailStatStmt:     q.incrementUserEmailStatStmt,
		insertUserEmailJobStmt:         q.insertUserEmailJobStmt,
		listUserEmailJobsStmt:          q.listUserEmailJobsStmt,
		listUserOAuthTokensStmt:        q.listUserOAuthTokensStmt,
		upsertUserEmailSyncHistoryStmt: q.upsertUserEmailSyncHistoryStmt,
		upsertUserOAuthTokenStmt:       q.upsertUserOAuthTokenStmt,
	}
}
