// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package client

import (
	"context"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const getUserEmailJob = `-- name: GetUserEmailJob :one
select
    job_id,
    user_id,
    user_email,
    email_thread_id,
    company,
    job_title,
    data,
    created_at,
    updated_at
from public.user_email_job
where job_id = $1
`

func (q *Queries) GetUserEmailJob(ctx context.Context, jobID uuid.UUID) (UserEmailJob, error) {
	row := q.queryRow(ctx, q.getUserEmailJobStmt, getUserEmailJob, jobID)
	var i UserEmailJob
	err := row.Scan(
		&i.JobID,
		&i.UserID,
		&i.UserEmail,
		&i.EmailThreadID,
		&i.Company,
		&i.JobTitle,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserEmailSyncHistory = `-- name: GetUserEmailSyncHistory :one
select
    user_id,
    history_id,
    synced_at,
    created_at,
    updated_at
from public.user_email_sync_history
where user_id = $1
`

func (q *Queries) GetUserEmailSyncHistory(ctx context.Context, userID uuid.UUID) (UserEmailSyncHistory, error) {
	row := q.queryRow(ctx, q.getUserEmailSyncHistoryStmt, getUserEmailSyncHistory, userID)
	var i UserEmailSyncHistory
	err := row.Scan(
		&i.UserID,
		&i.HistoryID,
		&i.SyncedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserOAuthToken = `-- name: GetUserOAuthToken :one
select
    user_id,
    provider,
    token,
    is_valid,
    created_at,
    updated_at
from public.user_oauth_token
where user_id = $1 and provider = $2
`

type GetUserOAuthTokenParams struct {
	UserID   uuid.UUID `json:"user_id"`
	Provider string    `json:"provider"`
}

func (q *Queries) GetUserOAuthToken(ctx context.Context, arg GetUserOAuthTokenParams) (UserOauthToken, error) {
	row := q.queryRow(ctx, q.getUserOAuthTokenStmt, getUserOAuthToken, arg.UserID, arg.Provider)
	var i UserOauthToken
	err := row.Scan(
		&i.UserID,
		&i.Provider,
		&i.Token,
		&i.IsValid,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserProfileByEmail = `-- name: GetUserProfileByEmail :one
select
    user_id,
    email,
    first_name,
    last_name,
    is_active,
    auto_archive,
    auto_contribute,
    created_at,
    updated_at
from public.user_profile
where email = $1
`

func (q *Queries) GetUserProfileByEmail(ctx context.Context, email string) (UserProfile, error) {
	row := q.queryRow(ctx, q.getUserProfileByEmailStmt, getUserProfileByEmail, email)
	var i UserProfile
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.IsActive,
		&i.AutoArchive,
		&i.AutoContribute,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const incrementUserEmailStat = `-- name: IncrementUserEmailStat :exec
insert into public.user_email_stat(user_id, email, stat_id, stat_value)
values ($1, $2, $3, $4)
on conflict (user_id, email, stat_id)
do update set
    stat_value = user_email_stat.stat_value + excluded.stat_value
`

type IncrementUserEmailStatParams struct {
	UserID    uuid.UUID `json:"user_id"`
	Email     string    `json:"email"`
	StatID    string    `json:"stat_id"`
	StatValue int32     `json:"stat_value"`
}

func (q *Queries) IncrementUserEmailStat(ctx context.Context, arg IncrementUserEmailStatParams) error {
	_, err := q.exec(ctx, q.incrementUserEmailStatStmt, incrementUserEmailStat,
		arg.UserID,
		arg.Email,
		arg.StatID,
		arg.StatValue,
	)
	return err
}

const insertUserEmailJob = `-- name: InsertUserEmailJob :exec
insert into public.user_email_job(user_id, user_email, email_thread_id, company, job_title, data)
values ($1, $2, $3, $4, $5, $6)
`

type InsertUserEmailJobParams struct {
	UserID        uuid.UUID       `json:"user_id"`
	UserEmail     string          `json:"user_email"`
	EmailThreadID string          `json:"email_thread_id"`
	Company       string          `json:"company"`
	JobTitle      string          `json:"job_title"`
	Data          json.RawMessage `json:"data"`
}

func (q *Queries) InsertUserEmailJob(ctx context.Context, arg InsertUserEmailJobParams) error {
	_, err := q.exec(ctx, q.insertUserEmailJobStmt, insertUserEmailJob,
		arg.UserID,
		arg.UserEmail,
		arg.EmailThreadID,
		arg.Company,
		arg.JobTitle,
		arg.Data,
	)
	return err
}

const listUserEmailJobs = `-- name: ListUserEmailJobs :many
select
    job_id,
    user_id,
    user_email,
    email_thread_id,
    company,
    job_title,
    data,
    created_at,
    updated_at
from public.user_email_job
where user_id = $1
`

func (q *Queries) ListUserEmailJobs(ctx context.Context, userID uuid.UUID) ([]UserEmailJob, error) {
	rows, err := q.query(ctx, q.listUserEmailJobsStmt, listUserEmailJobs, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserEmailJob
	for rows.Next() {
		var i UserEmailJob
		if err := rows.Scan(
			&i.JobID,
			&i.UserID,
			&i.UserEmail,
			&i.EmailThreadID,
			&i.Company,
			&i.JobTitle,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserOAuthTokens = `-- name: ListUserOAuthTokens :many
select
    user_id,
    provider,
    token,
    is_valid,
    created_at,
    updated_at
from public.user_oauth_token
where provider = $1 and is_valid = $2
`

type ListUserOAuthTokensParams struct {
	Provider string `json:"provider"`
	IsValid  bool   `json:"is_valid"`
}

func (q *Queries) ListUserOAuthTokens(ctx context.Context, arg ListUserOAuthTokensParams) ([]UserOauthToken, error) {
	rows, err := q.query(ctx, q.listUserOAuthTokensStmt, listUserOAuthTokens, arg.Provider, arg.IsValid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserOauthToken
	for rows.Next() {
		var i UserOauthToken
		if err := rows.Scan(
			&i.UserID,
			&i.Provider,
			&i.Token,
			&i.IsValid,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertUserEmailSyncHistory = `-- name: UpsertUserEmailSyncHistory :exec
insert into public.user_email_sync_history(user_id, history_id, synced_at)
values ($1, $2, $3)
on conflict (user_id)
do update set
    history_id = excluded.history_id,
    synced_at = excluded.synced_at
`

type UpsertUserEmailSyncHistoryParams struct {
	UserID    uuid.UUID `json:"user_id"`
	HistoryID int64     `json:"history_id"`
	SyncedAt  time.Time `json:"synced_at"`
}

func (q *Queries) UpsertUserEmailSyncHistory(ctx context.Context, arg UpsertUserEmailSyncHistoryParams) error {
	_, err := q.exec(ctx, q.upsertUserEmailSyncHistoryStmt, upsertUserEmailSyncHistory, arg.UserID, arg.HistoryID, arg.SyncedAt)
	return err
}

const upsertUserOAuthToken = `-- name: UpsertUserOAuthToken :exec
insert into public.user_oauth_token (user_id, provider, token, is_valid)
values ($1, $2, $3, $4)
on conflict (user_id, provider)
do update set
    token = excluded.token,
    is_valid = excluded.is_valid
`

type UpsertUserOAuthTokenParams struct {
	UserID   uuid.UUID       `json:"user_id"`
	Provider string          `json:"provider"`
	Token    json.RawMessage `json:"token"`
	IsValid  bool            `json:"is_valid"`
}

func (q *Queries) UpsertUserOAuthToken(ctx context.Context, arg UpsertUserOAuthTokenParams) error {
	_, err := q.exec(ctx, q.upsertUserOAuthTokenStmt, upsertUserOAuthToken,
		arg.UserID,
		arg.Provider,
		arg.Token,
		arg.IsValid,
	)
	return err
}
