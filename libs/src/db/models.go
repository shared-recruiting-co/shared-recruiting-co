// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package db

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type InboxType string

const (
	InboxTypeCandidate InboxType = "candidate"
	InboxTypeRecruiter InboxType = "recruiter"
)

func (e *InboxType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = InboxType(s)
	case string:
		*e = InboxType(s)
	default:
		return fmt.Errorf("unsupported scan type for InboxType: %T", src)
	}
	return nil
}

type NullInboxType struct {
	InboxType InboxType
	Valid     bool // Valid is true if InboxType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullInboxType) Scan(value interface{}) error {
	if value == nil {
		ns.InboxType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.InboxType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullInboxType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.InboxType, nil
}

type AuthUser struct {
	ID    uuid.UUID `json:"id"`
	Email string    `json:"email"`
}

type CandidateOauthToken struct {
	UserID    uuid.UUID       `json:"user_id"`
	Provider  string          `json:"provider"`
	Token     json.RawMessage `json:"token"`
	IsValid   bool            `json:"is_valid"`
	CreatedAt time.Time       `json:"created_at"`
	UpdatedAt time.Time       `json:"updated_at"`
}

type Company struct {
	CompanyID   uuid.UUID `json:"company_id"`
	CompanyName string    `json:"company_name"`
	Website     string    `json:"website"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

type Job struct {
	JobID          uuid.UUID `json:"job_id"`
	Title          string    `json:"title"`
	DescriptionUrl string    `json:"description_url"`
	RecruiterID    uuid.UUID `json:"recruiter_id"`
	CompanyID      uuid.UUID `json:"company_id"`
	CreatedAt      time.Time `json:"created_at"`
	UpdatedAt      time.Time `json:"updated_at"`
}

type Recruiter struct {
	UserID    uuid.UUID       `json:"user_id"`
	Email     string          `json:"email"`
	FirstName string          `json:"first_name"`
	LastName  string          `json:"last_name"`
	Responses json.RawMessage `json:"responses"`
	CompanyID uuid.UUID       `json:"company_id"`
	CreatedAt time.Time       `json:"created_at"`
	UpdatedAt time.Time       `json:"updated_at"`
}

type RecruiterOauthToken struct {
	UserID    uuid.UUID       `json:"user_id"`
	Provider  string          `json:"provider"`
	Token     json.RawMessage `json:"token"`
	IsValid   bool            `json:"is_valid"`
	CreatedAt time.Time       `json:"created_at"`
	UpdatedAt time.Time       `json:"updated_at"`
}

type UserEmailJob struct {
	JobID         uuid.UUID       `json:"job_id"`
	UserID        uuid.UUID       `json:"user_id"`
	UserEmail     string          `json:"user_email"`
	EmailThreadID string          `json:"email_thread_id"`
	EmailedAt     time.Time       `json:"emailed_at"`
	Company       string          `json:"company"`
	JobTitle      string          `json:"job_title"`
	Data          json.RawMessage `json:"data"`
	CreatedAt     time.Time       `json:"created_at"`
	UpdatedAt     time.Time       `json:"updated_at"`
}

type UserEmailStat struct {
	UserID    uuid.UUID `json:"user_id"`
	Email     string    `json:"email"`
	StatID    string    `json:"stat_id"`
	StatValue int32     `json:"stat_value"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type UserEmailSyncHistory struct {
	UserID    uuid.UUID `json:"user_id"`
	InboxType InboxType `json:"inbox_type"`
	Email     string    `json:"email"`
	HistoryID int64     `json:"history_id"`
	SyncedAt  time.Time `json:"synced_at"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type UserOauthToken struct {
	UserID    uuid.UUID       `json:"user_id"`
	Provider  string          `json:"provider"`
	Token     json.RawMessage `json:"token"`
	IsValid   bool            `json:"is_valid"`
	CreatedAt time.Time       `json:"created_at"`
	UpdatedAt time.Time       `json:"updated_at"`
}

type UserProfile struct {
	UserID         uuid.UUID `json:"user_id"`
	Email          string    `json:"email"`
	FirstName      string    `json:"first_name"`
	LastName       string    `json:"last_name"`
	IsActive       bool      `json:"is_active"`
	AutoArchive    bool      `json:"auto_archive"`
	AutoContribute bool      `json:"auto_contribute"`
	CreatedAt      time.Time `json:"created_at"`
	UpdatedAt      time.Time `json:"updated_at"`
}

type Waitlist struct {
	UserID           uuid.UUID       `json:"user_id"`
	Email            string          `json:"email"`
	FirstName        string          `json:"first_name"`
	LastName         string          `json:"last_name"`
	LinkedinUrl      string          `json:"linkedin_url"`
	Responses        json.RawMessage `json:"responses"`
	CanCreateAccount bool            `json:"can_create_account"`
	CreatedAt        time.Time       `json:"created_at"`
	UpdatedAt        time.Time       `json:"updated_at"`
}
