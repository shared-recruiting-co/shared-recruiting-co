-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

-- Extension: moddatetime

-- DROP EXTENSION moddatetime;

CREATE EXTENSION IF NOT EXISTS moddatetime
    SCHEMA extensions
    VERSION "1.0";

CREATE TABLE IF NOT EXISTS public.user_email_sync_history
(
    user_id uuid NOT NULL,
    history_id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT user_email_sync_history_pkey PRIMARY KEY (user_id),
    CONSTRAINT user_email_sync_history_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.user_email_sync_history
    OWNER to postgres;

ALTER TABLE IF EXISTS public.user_email_sync_history
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.user_email_sync_history TO anon;

GRANT ALL ON TABLE public.user_email_sync_history TO authenticated;

GRANT ALL ON TABLE public.user_email_sync_history TO postgres;

GRANT ALL ON TABLE public.user_email_sync_history TO service_role;
CREATE POLICY "Users can view their own email sync history"
    ON public.user_email_sync_history
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING ((auth.uid() = user_id));

CREATE TRIGGER handle_updated_at_user_email_sync_history
    BEFORE UPDATE 
    ON public.user_email_sync_history
    FOR EACH ROW
    EXECUTE FUNCTION extensions.moddatetime('updated_at');

CREATE TABLE IF NOT EXISTS public.user_oauth_token
(
    user_id uuid NOT NULL,
    provider text COLLATE pg_catalog."default" NOT NULL,
    token jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT user_oauth_token_pkey PRIMARY KEY (user_id, provider),
    CONSTRAINT user_oauth_token_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.user_oauth_token
    OWNER to postgres;

ALTER TABLE IF EXISTS public.user_oauth_token
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.user_oauth_token TO anon;

GRANT ALL ON TABLE public.user_oauth_token TO authenticated;

GRANT ALL ON TABLE public.user_oauth_token TO postgres;

GRANT ALL ON TABLE public.user_oauth_token TO service_role;
CREATE POLICY "Users can insert their own oauth tokens."
    ON public.user_oauth_token
    AS PERMISSIVE
    FOR INSERT
    TO public
    WITH CHECK ((auth.uid() = user_id));
CREATE POLICY "Users can update own oauth tokens."
    ON public.user_oauth_token
    AS PERMISSIVE
    FOR UPDATE
    TO public
    USING ((auth.uid() = user_id));
CREATE POLICY "Users can view their own oauth tokens"
    ON public.user_oauth_token
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING ((auth.uid() = user_id));

CREATE TRIGGER handle_updated_at_user_oauth_token
    BEFORE UPDATE 
    ON public.user_oauth_token
    FOR EACH ROW
    EXECUTE FUNCTION extensions.moddatetime('updated_at');
