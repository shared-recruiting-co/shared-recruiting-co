-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE TABLE IF NOT EXISTS public.company
(
    company_id uuid NOT NULL DEFAULT uuid_generate_v4(),
    company_name text COLLATE pg_catalog."default" NOT NULL,
    website text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT company_pkey PRIMARY KEY (company_id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.company
    OWNER to postgres;

ALTER TABLE IF EXISTS public.company
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.company TO anon;

GRANT ALL ON TABLE public.company TO authenticated;

GRANT ALL ON TABLE public.company TO postgres;

CREATE TABLE IF NOT EXISTS public.recruiter
(
    user_id uuid NOT NULL,
    email text COLLATE pg_catalog."default" NOT NULL,
    first_name text COLLATE pg_catalog."default" NOT NULL,
    last_name text COLLATE pg_catalog."default" NOT NULL,
    responses jsonb NOT NULL DEFAULT '{}'::jsonb,
    company_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT recruiter_pkey PRIMARY KEY (user_id),
    CONSTRAINT recruiter_company_id_fkey FOREIGN KEY (company_id)
        REFERENCES public.company (company_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT recruiter_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.recruiter
    OWNER to postgres;

ALTER TABLE IF EXISTS public.recruiter
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.recruiter TO anon;

GRANT ALL ON TABLE public.recruiter TO authenticated;

GRANT ALL ON TABLE public.recruiter TO postgres;

GRANT ALL ON TABLE public.recruiter TO service_role;
CREATE POLICY "Recruiters can update their own profile"
    ON public.recruiter
    AS PERMISSIVE
    FOR UPDATE
    TO public
    USING ((auth.uid() = user_id));
CREATE POLICY "Recruiters can view their own profile"
    ON public.recruiter
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING ((auth.uid() = user_id));

CREATE TRIGGER handle_updated_at_recruiter
    BEFORE UPDATE 
    ON public.recruiter
    FOR EACH ROW
    EXECUTE FUNCTION extensions.moddatetime('updated_at');


GRANT ALL ON TABLE public.company TO service_role;
CREATE POLICY "Recruiters can view their own company"
    ON public.company
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING ((company_id IN ( SELECT recruiter.company_id
   FROM recruiter
  WHERE (recruiter.user_id = auth.uid()))));

CREATE TABLE IF NOT EXISTS public.job
(
    job_id uuid NOT NULL DEFAULT uuid_generate_v4(),
    title text COLLATE pg_catalog."default" NOT NULL,
    description_url text COLLATE pg_catalog."default" NOT NULL,
    recruiter_id uuid NOT NULL,
    company_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT job_pkey PRIMARY KEY (job_id),
    CONSTRAINT job_company_id_fkey FOREIGN KEY (company_id)
        REFERENCES public.company (company_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE,
    CONSTRAINT job_recruiter_id_fkey FOREIGN KEY (recruiter_id)
        REFERENCES public.recruiter (user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.job
    OWNER to postgres;

ALTER TABLE IF EXISTS public.job
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.job TO anon;

GRANT ALL ON TABLE public.job TO authenticated;

GRANT ALL ON TABLE public.job TO postgres;

GRANT ALL ON TABLE public.job TO service_role;
CREATE POLICY "Companies can view their jobs"
    ON public.job
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING ((company_id IN ( SELECT recruiter.company_id
   FROM recruiter
  WHERE (recruiter.user_id = auth.uid()))));
CREATE POLICY "Recruiters can delete their jobs"
    ON public.job
    AS PERMISSIVE
    FOR DELETE
    TO public
    USING ((auth.uid() = recruiter_id));
CREATE POLICY "Recruiters can insert their jobs"
    ON public.job
    AS PERMISSIVE
    FOR INSERT
    TO public
    WITH CHECK ((auth.uid() = recruiter_id));
CREATE POLICY "Recruiters can update their jobs"
    ON public.job
    AS PERMISSIVE
    FOR UPDATE
    TO public
    USING ((auth.uid() = recruiter_id));
CREATE POLICY "Recruiters can view their jobs"
    ON public.job
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING ((auth.uid() = recruiter_id));

CREATE TRIGGER handle_updated_at_job
    BEFORE UPDATE 
    ON public.job
    FOR EACH ROW
    EXECUTE FUNCTION extensions.moddatetime('updated_at');

REVOKE ALL ON TABLE public.user_email_job FROM authenticated;
REVOKE ALL ON TABLE public.user_email_job FROM postgres;
REVOKE ALL ON TABLE public.user_email_job FROM service_role;
GRANT ALL ON TABLE public.user_email_job TO authenticated;

GRANT ALL ON TABLE public.user_email_job TO service_role;

GRANT ALL ON TABLE public.user_email_job TO postgres;
